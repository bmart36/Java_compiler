/* Generated By:JavaCC: Do not edit this line. Tigger.java */
import java.util.ArrayList;
import ast.*;
import visitor.*;
import myUtils.*;

public class Tigger implements TiggerConstants {
    public static void main(String args[]) throws ParseException
    {
        Tigger parser = new Tigger(System.in);
        try{
                    parser.mainloop();
        }catch(ParseException e) {System.out.println(e.getMessage());}
    }

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
// each expression or statement will print the corresponding AST
// and evaluate it
  static final public void mainloop() throws ParseException {
  Exp a; Stmt s; Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case PRINT:
      case IF:
      case VAR:
      case LET:
      case WHILE:
      case DO:
      case FOR:
      case STRING:
      case QUIT:
      case IDENTIFIER:
      case TEXT:
      case MINUS:
      case OPAREN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case VAR:
      case STRING:
      case IDENTIFIER:
      case TEXT:
      case MINUS:
      case OPAREN:
        a = expression();
        jj_consume_token(EOL);
                        a.accept(new PrettyPrinter());
                        a.accept(new Eval());
                        System.out.println();
        break;
      case PRINT:
      case IF:
      case LET:
      case WHILE:
      case DO:
      case FOR:
      case QUIT:
        s = statement();
        jj_consume_token(EOL);
                 s.accept(new PrettyPrinter());
                 System.out.print("=> ");
                  s.accept(new Eval());
                 System.out.println();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public Stmt statement() throws ParseException {
  Stmt s=null; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      s = block();
      break;
    case PRINT:
      s = print();
      break;
    case IF:
      s = ifStmt();
      break;
    case WHILE:
      s = whileStmt();
      break;
    case DO:
      s = doWhileStmt();
      break;
    case FOR:
      s = forStmt();
      break;
    case QUIT:
      t = jj_consume_token(QUIT);
                     System.exit(0);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// The print statement serves to print any expression
  static final public Stmt print() throws ParseException {
  Stmt a; Exp b; Token t;
    jj_consume_token(PRINT);
    jj_consume_token(OPAREN);
    b = expression();
                                          a = new Print(b);
    jj_consume_token(CPAREN);
                                                                        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

// In a block one can define variables that belong to the block's
// scope and then use them in a set of statements that follow
// Both the expressions and statements are stored in 2 different 
// classes where each will be stored in a list
  static final public Block block() throws ParseException {
  Exp e; Stmt s; Block b; VarBlock vB = new VarBlock(); StmtBlock sB = new StmtBlock();
    jj_consume_token(LET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case VAR:
      case STRING:
      case IDENTIFIER:
      case TEXT:
      case MINUS:
      case OPAREN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      e = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                                  vB.addVar(e);
    }
    jj_consume_token(IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case LET:
      case WHILE:
      case DO:
      case FOR:
      case QUIT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      s = statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                                  sB.addStmt(s);
    }
    jj_consume_token(END);
          {if (true) return new Block(vB, sB);}
    throw new Error("Missing return statement in function");
  }

// The if statement test if an expression is true, if so then the
// first statement is considered. The next optional part takes another
// statement that is only considered if the expression in false. This 
// optional statement can be another if statement
  static final public Stmt ifStmt() throws ParseException {
  Exp ifE, elseE; Stmt ifS, elseS, s;
    jj_consume_token(IF);
    ifE = expression();
    jj_consume_token(THEN);
    ifS = statement();
                                 s = new IfStmt(ifE, ifS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseS = statement();
                                    s = new IfStmt(ifE, ifS, elseS);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
           {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// A while loop will rceive an expression which if continues to be
// true, the statement and expression in parenthesis are evaluated.
// The expression in parenthesis can be anything but to avoid an 
// infinite loop it is recomended that it is an increment or decrement
// expression that will eventually lead to exiting the loop.
  static final public Stmt whileStmt() throws ParseException {
  Exp e, i; Stmt s;
    jj_consume_token(WHILE);
    e = expression();
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(OPAREN);
    s = statement();
    jj_consume_token(SEP);
    i = expression();
    jj_consume_token(CPAREN);
          {if (true) return new WhileStmt(e, s, i);}
    throw new Error("Missing return statement in function");
  }

// Just like the while loop, with the difference that it will
// evaluate the statement and expression in parenthesis at least
// one time.
  static final public Stmt doWhileStmt() throws ParseException {
  Exp e, i; Stmt s;
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(OPAREN);
    s = statement();
    jj_consume_token(SEP);
    i = expression();
    jj_consume_token(CPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(WHILE);
    e = expression();
          {if (true) return new DoWhileStmt(e, s, i);}
    throw new Error("Missing return statement in function");
  }

// The for loop will evaluate an expression and the statement
// until the first expression reaches the value of the second one
  static final public Stmt forStmt() throws ParseException {
  Exp c, e; Stmt s; Token i;
    jj_consume_token(FOR);
    c = expression();
    jj_consume_token(TO);
    e = expression();
    jj_consume_token(DO);
    s = statement();
          {if (true) return new ForStmt(c, e, s);}
    throw new Error("Missing return statement in function");
  }

// Expression (the axiom).
// E -> ( type ID:=Eq | ID:=Eq | Eq )
// Eq -> C ( =C | <>C )
// C -> A ( <A | <=A | >A | >=A)
// A -> T ( +T | -T )
// T -> F ( *F | /F )
// F -> [-] <NUM> | (E) | ID | TEXT
  static final public Exp expression() throws ParseException {
  Exp a,b; Token i, t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      i = jj_consume_token(IDENTIFIER);
      jj_consume_token(AFFECTATION);
      b = equality();
                                                                 a = new Aff(i.toString(), b, true);
      break;
    case STRING:
      jj_consume_token(STRING);
      i = jj_consume_token(IDENTIFIER);
      jj_consume_token(AFFECTATION);
      b = equality();
                                                                    a = new Aff(i.toString(), b, true);
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_1(2)) {
        i = jj_consume_token(IDENTIFIER);
        jj_consume_token(AFFECTATION);
        b = equality();
                                                                        a = new Aff(i.toString(), b, false);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
        case TEXT:
        case MINUS:
        case OPAREN:
          a = equality();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
           {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp equality() throws ParseException {
  Exp a,b;
    a = comparison();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NEQ:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        b = comparison();
                                      a = new Eq(a, b);
        break;
      case NEQ:
        jj_consume_token(NEQ);
        b = comparison();
                                       a = new Neq(a, b);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
             {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp comparison() throws ParseException {
  Exp a,b;
    a = additive();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GEQ:
      case LT:
      case LEQ:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        b = additive();
                                    a = new GreaterThan(a, b);
        break;
      case GEQ:
        jj_consume_token(GEQ);
        b = additive();
                                     a = new GreaterEq(a, b);
        break;
      case LT:
        jj_consume_token(LT);
        b = additive();
                                    a = new LessThan(a, b);
        break;
      case LEQ:
        jj_consume_token(LEQ);
        b = additive();
                                     a = new LessEq(a, b);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
             {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp additive() throws ParseException {
  Exp a,b;
    a = term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = term();
                        a = new Add(a, b);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = term();
                         a = new Sub(a, b);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp term() throws ParseException {
  Exp a,b;
    a = factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        b = factor();
                                    a = new Mul(a, b);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        b = factor();
                           a = new Div(a, b);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

// Factor of a term.
  static final public Exp factor() throws ParseException {
  Token t; Exp a=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      t = jj_consume_token(NUMBER);
                                     a = new Num(-Integer.parseInt(t.toString()));
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                       a = new Num(Integer.parseInt(t.toString()));
      break;
    case OPAREN:
      jj_consume_token(OPAREN);
      a = expression();
      jj_consume_token(CPAREN);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        SymTable sm = SymTable.getHM();
        Object o = sm.getValueType(t.toString(), false);
        if(o instanceof Var) a = (Var)o;
        else if(o instanceof MyString) a = (MyString)o;
        else a = new Var(t.toString());
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
                a = new MyString(t.toString());
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(AFFECTATION)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TiggerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x49cb9990,0x49cb9990,0x439180,0x40,0x49880810,0x40,0x40,0x439180,0x40,0x400,0x40,0x40,0x40,0x80800,0x49800010,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x30000000,0x30000000,0x49800010,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0xf0,0xf0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Tigger(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Tigger(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TiggerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Tigger(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TiggerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Tigger(TiggerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TiggerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
